// src/server/ws/index.js (–∏–ª–∏ –∫–∞–∫ —É —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è)
import { Server } from "socket.io";
import jwt from "jsonwebtoken";                 // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ —Ç–æ–∫–µ–Ω—É
import Message from "./models/Message.js";
import mongoose from "mongoose";

const connectedUsers = new Map(); // userId -> socketId

export default function startWebsocketServer(server) {
  const io = new Server(server, {
    cors: {
      origin: process.env.CLIENT_URL || "http://localhost:5173",
      credentials: true,
    },
  });

  // –¥–æ—Å—Ç—É–ø –≥–ª–æ–±–∞–ª—å–Ω–æ (—Ç–≤–æ–π –∫–æ–¥ –Ω–∞ –Ω–∏—Ö –æ–ø–∏—Ä–∞–µ—Ç—Å—è)
  global._io = io;
  global._connectedUsers = connectedUsers;

  io.on("connection", (socket) => {
    console.log("üîå socket connected:", socket.id);

    // === 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –Ω–∏–∂–µ.
    try {
      const raw =
        socket.handshake.auth?.token ||
        (socket.handshake.headers?.authorization || "").replace(/^Bearer\s+/i, "");
      if (raw && process.env.JWT_SECRET) {
        const { id } = jwt.verify(raw, process.env.JWT_SECRET);
        if (id) {
          connectedUsers.set(String(id), socket.id);
          socket.data.userId = String(id);
          socket.broadcast.emit("userOnline", { userId: String(id) });
        }
      }
    } catch {
      /* –Ω–µ —Ä–≤—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ register */
    }

    // === 2) –Ø–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞; —Ñ—Ä–æ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å socket.emit("register", myId))
    socket.on("register", (userId) => {
      const uid = String(userId);
      connectedUsers.set(uid, socket.id);
      socket.data.userId = uid;
      console.log(`‚úÖ user ${uid} online`);
      socket.broadcast.emit("userOnline", { userId: uid });
    });

    // === 3) –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–Ω–∏–º–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
    // A) —Ç–≤–æ–π —Ñ–æ—Ä–º–∞—Ç:  "sendMessage" { to, from, content }
    socket.on("sendMessage", async (payload, ack) => {
      const to = String(payload?.to || "");
      const from = String(payload?.from || socket.data.userId || "");
      const content = (payload?.content || "").trim();
      await handleSend(io, { from, to, text: content }, ack);
    });

    // B) —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: "message:send" { recipientId, text } + ack
    socket.on("message:send", async (payload, ack) => {
      const to = String(payload?.recipientId || "");
      const from = String(socket.data.userId || payload?.from || "");
      const text = (payload?.text || "").trim();
      await handleSend(io, { from, to, text }, ack);
    });

    // === 4) –ü—Ä–æ—á–∏—Ç–∞–Ω–æ
    socket.on("messageRead", async ({ from, to }) => {
      try {
        await Message.updateMany(
          { sender: String(from), recipient: String(to), read: false },
          { $set: { read: true } }
        );
        const senderSocket = connectedUsers.get(String(from));
        if (senderSocket) io.to(senderSocket).emit("messageRead", { by: String(to) });
      } catch (err) {
        console.error("messageRead error:", err);
      }
    });

    // === 5) typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    socket.on("typing", ({ from, to }) => {
      const rs = connectedUsers.get(String(to));
      if (rs) io.to(rs).emit("typing", { from: String(from) });
    });
    socket.on("stopTyping", ({ from, to }) => {
      const rs = connectedUsers.get(String(to));
      if (rs) io.to(rs).emit("stopTyping", { from: String(from) });
    });

    // === 6) disconnect
    socket.on("disconnect", () => {
      for (const [userId, sockId] of connectedUsers.entries()) {
        if (sockId === socket.id) {
          connectedUsers.delete(userId);
          console.log(`‚ùå user ${userId} offline`);
          socket.broadcast.emit("userOffline", { userId });
          break;
        }
      }
    });
  });

  console.log("üì° WebSocket server up");
}

/**
 * –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * –ü–æ–Ω–∏–º–∞–µ—Ç –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç ack, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ø–∞–¥–∞–ª –ø–æ timeout.
 */
async function handleSend(io, { from, to, text }, ack) {
  try {
    if (!from || !to || !text) throw new Error("from, to, text are required");

    const message = await Message.create({
  sender: new mongoose.Types.ObjectId(String(from)),
  recipient: new mongoose.Types.ObjectId(String(to)),
      content: text,
    });

    // —ç–º–∏—Ç–∏–º –°–û–ë–´–¢–ò–Ø –í –û–ë–û–ò–• –ù–ê–ó–í–ê–ù–ò–Ø–• –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const payloadForRecipient = {
      _id: message._id,
      content: message.content,
      sender: from,
      recipient: to,
      createdAt: message.createdAt,
      read: false,
    };

    const payloadForSender = {
      _id: message._id,
      content: message.content,
      sender: from,
      recipient: to,
      createdAt: message.createdAt,
      read: false,
    };

    const rSock = global._connectedUsers.get(String(to));
    if (rSock) {
  
      io.to(rSock).emit("newMessage", payloadForRecipient);
    }

    const sSock = global._connectedUsers.get(String(from));
    if (sSock) {
      io.to(sSock).emit("messageSent", payloadForSender);
    }

    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å ack, —á—Ç–æ–±—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª timeout
    if (typeof ack === "function") ack(null, payloadForSender);
  } catch (err) {
    console.error("send error:", err);
    if (typeof ack === "function") ack(err.message || "Send error");
  }
}
